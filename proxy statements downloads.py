from operator import contains
from selenium import webdriver
import time
import urllib.request, urllib.error, urllib.parse
from selenium.webdriver.common.by import By
import csv
import codecs
import os
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# Create a request interceptor
def interceptor(request):
    del request.headers['Referer']  # Delete the header first
    request.headers['Referer'] = 'boshanna1994@gmail.com'








cik=[ '14637', '19002', '21510', '21535', '21665', '21828', '22252', '22444', '22551', '23111', '23341', '23503', '23666', '23675', '24104', '24491', '25095', '25212', '25354', '25793', '26076', '27096', '34471', '34908', '39341', '50957', '51143', '51253', '51434', '51548', '51644', '52530', '52795', '52969', '52971', '52988', '54381', '54441', '54480', '54681', '54991', '55067', '55135', '55242', '67215', '67279', '67347', '67472', '67517', '67716', '67887', '68145', '68270', '68505', '68622', '68709', '69422', '69488', '69633', '69671', '69680', '69733', '69891', '77551', '106455', '106532', '106535', '106618', '106640', '107681', '215219', '350403', '351298', '351483', '354813', '700998', '708850', '709519', '709804', '710597', '710846', '711065', '712511', '723928', '724267', '725887', '729284', '768892', '774937', '784770', '790071', '790075', '793628', '797662', '808219', '808439', '824726', '842695', '842919', '843212', '843405', '844985', '856200', '858155', '866734', '874388', '875296', '875729', '875762', '875809', '876779', '877019', '877931', '879465', '883505', '884247', '885475', '885489', '885540', '893813', '893821', '897078', '897322', '904350', '904851', '907686', '913590', '913596', '914397', '914398', '916230', '918964', '919583', '919605', '920317', '924373', '924613', '932352', '942650', '943003', '943061', '944400', '945641', '1001279', '1002577', '1006637', '1009922', '1015715', '1015820', '1015920', '1015922', '1015923', '1016838', '1021010', '1022097', '1024342', '1024446', '1030485', '1030839', '1030894', '1038368', '1038541', '1038572', '1038683', '1045739', '1048142', '1048515', '1048566', '1058828', '1059167', '1060595', '1060883', '1060955', '1062720', '1062781', '1062814', '1065728', '1066684', '1066961', '1067318', '1067428', '1067491', '1071272', '1071321', '1071438', '1078037', '1083663', '1083706', '1084421', '1084597', '1084702', '1089932', '1094005', '1095079', '1095270', '1095471', '1095595', '1095963', '1108345', '1110361', '1110452', '1110611', '1110646', '1111485', '1111588', '1114999', '1115463', '1115552', '1115826', '1115836', '1115837', '1116134', '1116284', '1119744', '1119745', '1119769', '1119774', '1119775', '1121439', '1121680', '1121850', '1137469', '1138978', '1139023', '1140184', '1141263', '1164964', '1164975', '1181232', '1235912', '1236761', '1277250', '1277998', '1278308', '1278466', '1278653', '1278730', '1279495', '1279740', '1279771', '1279944', '1280363', '1280376', '1280797', '1286139', '1299966', '1299967', '1300050', '1308569', '1308648', 
'1308833', '1308858', '1309057', '1309167', '1309799', '1314077', '1315098', '1328511', '1333291', '1339005', '1351548', '1351690', '1380106', '1380124', '1380277', '1381074', '1381105', '1387964', '1407973', '1408095', '1416697', '1416729', '1431695', '1431888', '1432133', '1452965', '1453015', '1453122', '1453420', '1453687', '1454938', '1455129', '1455380', '1455768', '1455886', '1455900', '1455926', '1456453', '1456787', '1462056', '1462506', '1468327', '1476840', '1476963', '1476978', '1477081', '1482981', '1483393', '1483403', '1483405', '1496963', '1497074', '1497120', '1497246', '1497350', '1497417', '1497572', '1497595', '1497599', '1497632', '1497677', '1504776', '1504795', '1504796', '1505031', '1505065', '1505124', '1506184', '1506185', '1506270', '1512922', '1513186', '1513514', '1513845', '1513847', '1514226', '1514242', '1514341', '1514363', '1514418', '1514440', '1514682', '1527096', '1527246', '1527273', '1527355', '1527457', '1527635', '1527636', '1527762', '1527890', '1528098', '1528287', '1528308', '1531177', '1531978', '1555560', '1558569', '1558583', '1558633', '1558924', '1559149', '1560186', '1560603', '1561540', '1567900', '1568079', '1568100', '1568385', '1569329', '1569345', '1570154', '1570505', '1570562', '1571508', '1571636', '1576885', '1576914', '1580560', '1580670', '1580732', '1581043', '1582961', '1583138', '1583708', '1584133', '1584361', '1584371', '1584547', '1590418', '1590496', '1590565', '1611052', '1625278', '1625414', '1625641', '1625791', '1626064', '1637873', '1637890', '1645070', '1645198', '1645209', '1645842', '1647338', '1647866', '1648189', '1648257', '1648315', '1648416', '1648741', '1648798', '1650164', '1650264', '1650287', '1650372', '1651562', '1651595', '1651625', 
'1651717', '1652499', '1652572', '1652724', '1652842', '1652866', '1654126', '1657573', '1658099', '1658551', '1665988', '1666071', '1667011', '1667280', '1667313', '1667415', '1667524', '1671116', '1671927', '1676238', '1676595', '1676621', '1676725', '1676759', '1676988', '1677235', '1677250', '1677940', '1678022', '1699838', '1700211', '1711933', '1712178', '1712807', '1713334', '1713443', '1713525', '1713923', '1713930', '1713947', '1714368', '1714768', '1714921', '1716583', '1716621', '1716726', '1716770', '1717393', '1717557', '1718420', '1718852', '1718903', '1719009', '1719714', '1720161', '1720201', '1720420', '1720424', '1720446', '1720789', '1721181', '1722214', '1743907', '1743971', '1744676', '1744781', '1746885', '1747661', '1748679', '1748797', '1749704', '1749797', '1750155', '1750593', '1751008', '1751017', '1751143', '1751876', '1752234', '1753368', '1753512', '1754323', '1754664', '1755058', '1755874', '1756594', '1756607', '1756655', '1756708', '1757064', '1757074', '1757083', '1757097', '1757143', '1757261', '1757399', '1757497', '1757840', '1758530', '1758736', '1758766', '1759136', '1759528', '1759614', '1759655', '1759783', '1760764', '1760854', '1761157', '1761181', '1761369', '1766363', '1766600', '1767582', '1768225', '1768259', '1769116', '1769484', '1769768', '1770088', '1770540', '1770883', '1771007', '1771039', '1771279', '1771910', '1772253', '1773250', '1774155', '1774675', '1774983', '1775085', '1775194', '1775898', '1776067', '1776904', '1776967', '1776985', '1777765', '1777946', '1778016', '1778404', '1779020', '1779128', '1779476', '1779578', '1780201', '1780531', '1780652', '1780731', '1780785', '1781162', '1781193', '1781397', '1781753', '1782037', '1782309', '1782594', '1782999', 
'1783328', '1783378', '1783407', '1784930', '1785345', '1785566', '1785880', '1786255', '1786286', '1786511', '1786909', '1787100', '1787134', '1788257', '1788717', '1789029', '1789299', '1789397', '1789769', '1789940', '1790169', '1790340', '1790665', '1790693', '1791278', '1791405', '1791703', '1791706', '1791725', '1792267', '1792627', '1792829', '1793663', '1793862', '1794350', '1794846', '1795251', '1795579', '1795589', '1795753', '1796911', '1799011', '1799191', '1799290', '1799567', '1800227', '1800682', '1801198', '1802156', '1802883', '1803112', '1803800', '1804176', '1804583', '1804591', '1805012', '1806220', '1806904', '1806952', '1807120', '1807166', '1807192', '1807389', '1807707', '1807794', '1807901', '1808945', '1809122', '1809158', '1809616', '1810467', '1810997', '1811059', '1811109', '1811115', '1811210', '1811216', '1811856', '1811942', '1812364', '1812477', '1813607', '1813783', '1813914', '1814067', '1814423', '1814888', '1815021', '1815566', '1815620', '1815846', '1815849', '1816017', '1816172', '1816233', '1816581', '1816613', '1816708', '1816815', '1817358', '1817511', '1817713', '1817944', '1818093', '1818201', '1818331', '1818382', '1818838', '1819411', '1819493', '1819516', '1819574', '1819580', '1819584', '1819810', '1819881', '1819928', '1819974', '1819994', '1820201', '1820630', '1821159', '1821349', '1821468', '1821806', '1821825', '1822359', '1822829', '1822928', '1823144', '1823306', '1823375', '1823593', '1823878', '1823882', '1824036', '1824403', '1824734', '1824920', '1824963', '1825079', '1825155', '1825480', '1826000', '1826018', '1826168', '1826492', '1826681', '1826836', '1826889', '1827161', '1828102', '1828182', '1828316', '1828365', '1828377', '1828443', '1828672', '1828673', 
'1828791', '1828884', '1828962', '1829055', '1829118', '1829280', '1829725', '1829864', '1829959', '1829966', '1830043', '1830072', '1830210', '1830214', '1831097', '1831363', '1831617', '1831651', '1831840', '1831894', '1831907', '1831915', '1832332', '1832433', '1832928', '1833096', '1833197', '1833835', '1833908', '1834026', '1834048', '1834376', '1834488', '1834489', '1834494', '1834584', '1834585', '1834622', '1834974', '1834975', '1835539', '1835579', '1835591', '1835681', '1835724', '1835963', '1836056', '1836470', '1836833', '1836875', '1836981', '1837014', '1837412', '1837686', '1838413', '1838672', '1838937', '1838957', '1839439', '1839799', '1839839', '1840292', '1840502', '1840706', '1840761', '1840780', '1840904', '1841156', '1841387', '1841675', '1841804', '1841925', '1841968', '1842718', '1842731', '1842827', '1843388', '1843586', '1844280', '1844450', '1844862', '1844971', '1845022', '1845097', '1845257', '1845338', '1845815', '1845840', '1846069', '1846510', '1846576', '1846832', '1847368', '1847462', '1847584', '1847590', '1848416', '1849396', '1849853', '1850079', '1850235', '1850838', '1850902', '1851003', '1851112', '1851657', '1851682', '1852244', '1853145', '1853513', '1853860', '1854017', '1854139', '1854233', '1854445', '1854545', '1854587', '1854640', '1855457', '1855612', '1855747', '1856028', '1856031', '1856082', '1856236', '1856314', '1856430', '1856437', '1856485', '1856525', '1856608', '1856725', '1857154', '1857475', '1857853', '1857951', '1858257', '1858685', '1858985', '1859285', '1860543', '1860657', '1860782', '1860805', '1861233', '1861449', '1861522', '1861795', '1863105', '1864448', '1865107', '1865187', '1865408', '1865631', '1865688', '1865963', '1866175', '1866368', '1866390', 
'1866501', '1866550', '1866581', '1866633', '1866692', '1866757', '1867066', '1867072', '1867096', '1867102', '1867834', '1868726', '1868778', '1868912', '1868941', '1868995', '1869198', '1869467', '1869858', '1870600', '1870940', '1870997', '1871130', '1871509', '1872356', '1872525', '1874178', '1874252', '1874944', '1875444', '1876183', '1876581', '1877787', '1878057', '1879016', '1879726', '1880319', '1880343', '1883037', '1884697', '1890567', '1891075', '1892492', '1904501', '1904856', '1906324', '1909747', '1910851', '1912291', '1915657', '1925124']
driver = webdriver.Chrome(r"C:\Users\s5803701\Desktop\edgar\chromedriver.exe")
# Set the interceptor on the driver
driver.request_interceptor = interceptor
for i in cik:
    try:
    
                            driver.get("https://www.sec.gov/edgar/browse/?CIK="+str(i)+"&owner=exclude")
                            wait = WebDriverWait(driver, 20)
                            time.sleep(10)
                            company_name=driver.find_element(By.ID, "name").get_attribute("textContent")
                            time.sleep(1)
                            driver.find_elements(By.LINK_TEXT,"[+]")[3].click()
                            
                            time.sleep(10)
                            driver.find_elements(By.CLASS_NAME,"js-selected-view-all")[2].click()
                            # time.sleep(10)
                            links=driver.find_elements(By.TAG_NAME,"a")
                            for link in links:
                                b=link.get_attribute("href")
                                
                                if "def14a.htm" in str(b):
                                    trs= driver.find_elements_by_tag_name("tr")
                                    # time.sleep(5)
                            for tr in trs:
                                tds=tr.find_elements_by_tag_name("td")
                               
                                # time.sleep(5)
                                for td in tds:
                                    date_cheack=td.get_attribute("textContent")
                                    if not date_cheack.upper().isupper():
                                        date=date_cheack
                                
                                   
                                content_blocks = tr.find_elements_by_class_name("text-wrap")
                               
                                   
                                # time.sleep(5)
                                for block in content_blocks:
                                               
                                                statements=block.get_attribute("data-export")
                                                if  "Other definitive proxy statements" in  statements:
                                                   
                                                   
                                                    # bb.append(statements)
                                                    elements = block.find_elements_by_tag_name("a")
                                                   
                                                   
                                                    for el in elements:
                                                        statements=el.get_attribute("class")
                                                       
                                                        if  "document-link" in  statements:
                                                               
                                                                url=el.get_attribute("href")
                                                               
                                                               
                                                           
                                                                # time.sleep(10)
                                                                if "2008" in date or "2009" in date or "2010" in date or "2011" in date or "2012" in date or "2013" in date or "2014" in date or "2015" in date or "2016" in date or "2017" in date or "2018" in date or "2019" in date or "2020" in date or "2021" in date :
                                                                    n = os.path.join(r"C:\Users\s5803701\Desktop\edgar\finalDownloads", str(i)+"_"+str(date)+".htm")
                                                                    f = codecs.open(n, "w", "utf−8")
                                                                    driver = webdriver.Chrome(r"C:\Users\s5803701\Desktop\edgar\chromedriver.exe")
                                                                    driver.get(url)
                                                                    time.sleep(1)
                                                                   

                                                                    h = driver.page_source
                                                                    f.write(h)
    except:
        try:
                            typetextfirst = wait.until(EC.element_to_be_clickable((By.ID, "searchbox")))
                            typetextfirst.click()
                            typetextfirst.send_keys(["Other definitive proxy statements"])
                            links=driver.find_elements(By.TAG_NAME,"a")
                            for link in links:
                                b=link.get_attribute("href")
                                
                                if "def14a.htm" in str(b):
                                    trs= driver.find_elements_by_tag_name("tr")
                                    # time.sleep(5)
                            for tr in trs:
                                tds=tr.find_elements_by_tag_name("td")
                               
                                # time.sleep(5)
                                for td in tds:
                                    date_cheack=td.get_attribute("textContent")
                                    if not date_cheack.upper().isupper():
                                        date=date_cheack
                                
                                   
                                content_blocks = tr.find_elements_by_class_name("text-wrap")
                               
                                   
                                # time.sleep(5)
                                for block in content_blocks:
                                               
                                                statements=block.get_attribute("data-export")
                                                if  "Other definitive proxy statements" in  statements:
                                                   
                                                   
                                                    # bb.append(statements)
                                                    elements = block.find_elements_by_tag_name("a")
                                                   
                                                   
                                                    for el in elements:
                                                        statements=el.get_attribute("class")
                                                       
                                                        if  "document-link" in  statements:
                                                               
                                                                url=el.get_attribute("href")
                                                               
                                                               
                                                           
                                                                # time.sleep(10)
                                                                if "2008" in date or "2009" in date or "2010" in date or "2011" in date or "2012" in date or "2013" in date or "2014" in date or "2015" in date or "2016" in date or "2017" in date or "2018" in date or "2019" in date or "2020" in date or "2021" in date :
                                                                    n = os.path.join(r"C:\Users\s5803701\Desktop\edgar\finalDownloads", str(i)+"_"+str(date)+".htm")
                                                                    f = codecs.open(n, "w", "utf−8")
                                                                    driver = webdriver.Chrome(r"C:\Users\s5803701\Desktop\edgar\chromedriver.exe")
                                                                    driver.get(url)
                                                                    time.sleep(1)
                                                                   

                                                                    h = driver.page_source
                                                                    f.write(h)


        except:    
                    print(i)
                    print("not found")